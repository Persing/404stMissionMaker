package model;

public class Token {
    private final Type type;
    private final String value;

    public Token(Type type, String value) {
        this.type = type;
        this.value = value;
    }

    public Type getType() {
        return type;
    }

    public String getValue() {
        return value;
    }

    public enum Type {
        CATEGORY, PLAIN_TEXT
    }

    /**
     * Creates a Token object from a string. Words in [] will become a {@link Type#CATEGORY} and the rest of the string is ignored.
     * Strings without [] in them are considered {@link Type#PLAIN_TEXT}
     *
     * @param tokenString The String to parse into a token
     * @return The token generated by the string
     */
    public static Token fromString(String tokenString) {
        if (!tokenString.startsWith("[") && !tokenString.contains("]")) {
            return new Token(Type.PLAIN_TEXT, tokenString);
        }

        String category = tokenString.substring(1, tokenString.length() - 1);
        return new Token(Type.CATEGORY, category);
    }

    @Override
    public String toString() {
        return "[Token{" +
                "type=" + type +
                ", value='" + value + '\'' +
                "}]";
    }
}
